! if,else if,select case,conditional expression
Ada[1],if condition then <dl><dd>statements</dd></dl> «else <dl><dd>statements»</dd></dl> end if,if condition1 then <dl><dd>statements</dd></dl> elsif condition2 then <dl><dd>statements</dd></dl>... «else <dl><dd>statements»</dd></dl> end if,case expression is<dl><dd>when value_list1 => statements</dd><dd>when value_list2 => statements</dd></dl>...<dl><dd>«when others => statements» </dd></dl>end case
Seed7,if condition then <dl><dd>statements</dd></dl> «else <dl><dd>statements»</dd></dl> end if,if condition1 then <dl><dd>statements</dd></dl> elsif condition2 then <dl><dd>statements</dd></dl>... «else <dl><dd>statements»</dd></dl> end if,case expression of when set1 : statements ... «otherwise: statements» end case
Modula-2,if condition then <dl><dd>statements</dd></dl> «else <dl><dd>statements»</dd></dl> end,if condition1 then <dl><dd>statements</dd></dl> elsif condition2 then <dl><dd>statements</dd></dl>... «else <dl><dd>statements»</dd></dl> end,case expression of caseLabelList : statements | ... «else statements» end
ALGOL 68,if condition then statements «else statements» fi,if condition then statements elif condition then statements fi,"case switch in statements, statements«,... out statements» esac"
ALGOL 68 (brief form),statements «| statements» ),statements |: condition | statements ),"statements,... «| statements» )"
APL,:If condition <dl><dd>instructions</dd></dl> «:Else <dl><dd>instructions»</dd></dl>:EndIf,:If condition <dl><dd>instructions</dd></dl> :ElseIf condition <dl><dd>instructions</dd></dl> ... «:Else <dl><dd>instructions»</dd></dl> :EndIf,:Select expression :Case case1 <dl><dd>instructions</dd></dl> ... «:Else<dl><dd>instructions»</dd></dl>:EndSelect
C (C99) and: Objective-C C++ (STL) D Java JavaScript PHP,if (condition) instructions «else instructions» instructions can be a single statement or a block in the form of: { statements },if (condition) instructions else if (condition) instructions ... «else instructions» if (condition) instructions else { if (condition) instructions },switch (variable) {<dl><dd>case case1: instructions «break;» ... «default: instructions»</dd></dl>}
C#,if (condition) instructions «else instructions» instructions can be a single statement or a block in the form of: { statements },if (condition) instructions «else instructions» if (condition) instructions else if (condition) instructions ... «else instructions»,"All non-empty cases must end with a break or goto case statement (that is, they are not allowed to fall-through to the next case). The default case is not required to come last."
Windows PowerShell,if (condition) instructions «else instructions»,if (condition) { instructions } elseif (condition) { instructions } ... «else { instructions }»,switch (variable) { case1 { instructions «break;» } ... «default { instructions }»}
Go,if condition {instructions} «else {instructions}»,if condition {instructions} else if condition {instructions} ... «else {instructions}» or switch {<dl><dd>case condition: instructions ... «default: instructions»</dd></dl>},switch variable {<dl><dd>case case1: instructions ... «default: instructions»</dd></dl>}
Swift,if condition {instructions} «else {instructions}»,if condition {instructions} else if condition {instructions} ... «else {instructions}»,switch variable {<dl><dd>case case1: instructions ... «default: instructions»</dd></dl>}
Perl,if (condition) {instructions} «else {instructions}» or unless (notcondition) {instructions} «else {instructions}»,if (condition) {instructions} elsif (condition) {instructions} ... «else {instructions}» or unless (notcondition) {instructions} elsif (condition) {instructions} ... «else {instructions}»,use feature "switch"; ... given (variable) {<dl><dd>when (case1) { instructions } ... «default { instructions }»</dd></dl>}
Raku,if condition {instructions} «else {instructions}» or unless notcondition {instructions},if condition {instructions} elsif condition {instructions} ... «else {instructions},given variable {<dl><dd>when case1 { instructions } ... «default { instructions }»</dd></dl>}
Ruby,if condition <dl><dd>instructions</dd></dl> «else <dl><dd>instructions»</dd></dl>,if condition <dl><dd>instructions</dd></dl> elsif condition <dl><dd>instructions</dd></dl> ... «else <dl><dd>instructions»</dd></dl> end,case variable when case1 <dl><dd>instructions</dd></dl> ... «else<dl><dd>instructions»</dd></dl>end
Scala,if (condition) {instructions} «else {instructions}»,if (condition) {instructions} else if (condition) {instructions} ... «else {instructions}»,expression match {<dl><dd>case pattern1 => expression case pattern2 => expression ... «case _ => expression»</dd></dl>pattern matching[b]
Smalltalk,condition ifTrue: <dl><dd>trueBlock</dd></dl> «ifFalse: <dl><dd>falseBlock»</dd></dl> end,,
Common Lisp,(when condition <dl><dd>instructions)</dd></dl> or (unless condition <dl><dd>instructions)</dd></dl> or (if condition <dl><dd>(progn instructions)</dd><dd>«(progn instructions)»)</dd></dl>,(cond (condition1 instructions) <dl><dd>(condition2 instructions)</dd><dd>...</dd><dd>«(t instructions)»)</dd></dl>,(case expression<dl><dd>(case1 instructions)</dd><dd>(case2 instructions)</dd><dd>...</dd><dd>«(otherwise instructions)»)</dd></dl>
Scheme,(when conditioninstructions) or (if condition (begin instructions) «(begin instructions)»),(cond (condition1 instructions) (condition2 instructions) ... «(else instructions)»),(case (variable) ((case1) instructions) ((case2) instructions) ... «(else instructions)»)
ISLISP,(if condition <dl><dd>(progn instructions)</dd><dd>«(progn instructions)»)</dd></dl>,(cond (condition1 instructions) <dl><dd>(condition2 instructions)</dd><dd>...</dd><dd>«(t instructions)»)</dd></dl>,(case expression<dl><dd>(case1 instructions)</dd><dd>(case2 instructions)</dd><dd>...</dd><dd>«(t instructions)»)</dd></dl>
Pascal,if condition then begin <dl><dd>instructions</dd></dl> end «else begin<dl><dd>instructions</dd></dl>end»pascal semicolon[c],if condition then begin <dl><dd>instructions</dd></dl> end else if condition then begin<dl><dd>instructions</dd></dl> end ... «else begin<dl><dd>instructions</dd></dl> end»pascal semicolon[c],case variable of <dl><dd>case1: instructions ... «else: instructions»</dd></dl>endpascal semicolon[c]
Visual Basic,If condition Then <dl><dd>instructions</dd></dl> «Else <dl><dd>instructions»</dd></dl>End If Single-line: If we let instructions be: statement : statement : ... If condition Then instructions« Else instructions»,If condition Then<dl><dd>instructions</dd></dl> ElseIf condition Then<dl><dd>instructions</dd></dl> ... «Else <dl><dd>instructions»</dd></dl>End If Single-line: See note about C-like languages; the Else clause of a single-line If statement can contain another single-line If statement.,Select« Case» variable<dl><dd>Case case_pattern</dd>1<dl><dd>instructions</dd></dl><dd>...</dd><dd>«Case Else<dl><dd>instructions»</dd></dl></dd></dl>End Select
Visual Basic .NET,,,
Xojo,,,
Python python indent[a],if condition : Tab instructions «else: Tab instructions»,if condition : Tab instructions elif condition : Tab instructions ... «else: Tab instructions»,
S-Lang,if (condition) { instructions } «else { instructions }»,if (condition) { instructions } else if (condition) { instructions } ... «else { instructions }»,switch (variable) { case case1: instructions } { case case2: instructions } ...
Fortran,IF (condition) THEN <dl><dd> instructions </dd></dl> ELSE <dl><dd> instructions </dd></dl> ENDIF,IF (condition) THEN <dl><dd> instructions </dd></dl> ELSEIF (condition) THEN <dl><dd> instructions </dd></dl> ... ELSE <dl><dd> instructions </dd></dl> ENDIF,SELECT CASE(variable)<dl><dd> CASE (case1) <dl><dd> instructions </dd></dl> ... CASE DEFAULT <dl><dd> instructions </dd></dl> </dd></dl> END SELECT
Forth,condition IF instructions « ELSE instructions» THEN,condition IF instructions ELSE condition IF instructions THEN THEN,value CASE case OF instructions ENDOF case OF instructions ENDOF default instructions ENDCASE
OCaml,if condition then begin instructions end «else begin instructions end»,if condition then begin instructions end else if condition then begin instructions end ... «else begin instructions end»,match value with <dl><dd>pattern1 -> expression  pattern2 -> expression ... « _ -> expression»pattern matching[b]</dd></dl>
F#,Lightweight syntax mode: Either on a single line or with indentation as shown below: if condition then Tab instructions «else Tab instructions» Verbose syntax mode: Same as Standard ML (below).,Lightweight syntax mode: Either on a single line or with indentation as shown below: if condition then Tab instructions elif condition then Tab instructions ... «else Tab instructions» Verbose syntax mode: Same as Standard ML (below).,
Standard ML,if condition then «(»instructions «)» else «(» instructions «)»,if condition then «(»instructions «)» else if condition then «(» instructions «)» ... else «(» instructions «)»,pattern2 => expression ... « _ => expression»pattern matching[b]</dd></dl>
Haskell (GHC),if condition then expression else expression or when condition (do instructions) or unless notcondition (do instructions),condition = expression <dl><dd>| condition = expression | otherwise = expression</dd></dl>,case value of {<dl><dd>pattern1 -> expression; pattern2 ->expression; ... «_ -> expression»</dd></dl>pattern matching[b]
Bash shell,<poem>if condition-command; then 4expression «else 4expression» fi</poem>,<poem>if condition-command; then 4expression elif condition-command; then 4expression «else 4expression» fi</poem>,<poem>case "$variable" in "$condition1" ) 4command... "$condition2" ) 4command... esac</poem>
CoffeeScript,if condition then expression «else expression»,if condition then expression else if condition then expression «else expression»,switch expression <dl><dd>when condition then expression</dd></dl> <dl><dd>else expression</dd></dl>
,if condition <dl><dd>expression</dd></dl> «else <dl><dd>expression»</dd></dl>,if condition <dl><dd>expression</dd></dl> else if condition <dl><dd>expression</dd></dl> «else <dl><dd>expression»</dd></dl>,
,expression if condition,unless condition <dl><dd>expression</dd></dl> else unless condition <dl><dd>expression</dd></dl> «else <dl><dd>expression»</dd></dl>,switch expression <dl><dd>when condition <dl><dd>expression</dd></dl> «else <dl><dd>expression»</dd></dl></dd></dl>
,unless condition <dl><dd>expression</dd></dl> «else <dl><dd>expression»</dd></dl>,,
,expression unless condition,,
COBOL,IF condition «THEN» <dl><dd> expression </dd></dl> «ELSE <dl><dd> expression». </dd></dl>COBOL END-IF[d],,EVALUATE expression «ALSO expression...» <dl><dd> WHEN case-or-condition «ALSO case-or-condition...» <dl><dd> expression </dd></dl></dd></dl> <dl><dd> ... </dd></dl> <dl><dd>«WHEN OTHER <dl><dd> expression» </dd></dl></dd></dl> END-EVALUATE
! if,else if,select case,conditional expression
