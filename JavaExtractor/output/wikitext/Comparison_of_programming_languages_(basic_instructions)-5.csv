,Argument values,Argument counts,Program name / Script name
Ada[1],Argument (n),Argument_Count,Command_Name
C (C99),argv[n],argc,first argument
Objective-C,,,
C++,,,
C#,args[n],args.Length,Assembly.GetEntryAssembly()<wbr/>.Location;
Java,,args.length,
D,,,first argument
JavaScript Windows Script Host implementation,WScript.Arguments(n),WScript.Arguments.length,WScript.ScriptName or WScript.ScriptFullName
Go,os.Args[n],len(os.Args),first argument
RustRust args[a],std::env::args().nth(n) std::env::args_os().nth(n),std::env::args().count() std::env::args_os().count(),std::env::args().next() std::env::args_os().next()
Swift,Process.arguments[n] or Process.unsafeArgv[n],Process.arguments.count or Process.argc,first argument
Common Lisp,,,
Scheme (R6RS),(list-ref (command-line) n),(length (command-line)),first argument
ISLISP,,,
Pascal,ParamStr(n),ParamCount,first argument
Visual Basic,Commandunseparated[b],,App.Path
Visual Basic .NET,CmdArgs(n),CmdArgs.Length,[Assembly].GetEntryAssembly().Location
Xojo,System.CommandLine,(string parsing),Application.ExecutableFile.Name
Python,sys.argv[n],len(sys.argv),first argument
S-Lang,__argv[n],__argc,first argument
Fortran,"DO i = 1,argc<dl><dd> CALL GET_COMMAND_ARGUMENT (i,argv(i)) </dd></dl> ENDDO",argc = COMMAND_ARGUMENT_COUNT (),"CALL GET_COMMAND_ARGUMENT (0,progname)"
PHP,$argv[n],$argc,first argument
Bash shell,"$n ($1, $2, $3, ...) $@ (all arguments)",$#,$0
Perl,$ARGV[n],scalar(@ARGV),$0
Raku,@*ARGS[n],@*ARGS.elems,$PROGRAM_NAME
Ruby,ARGV[n],ARGV.size,$0
Windows PowerShell,$args[n],$args.Length,$MyInvocation.MyCommand<wbr/>.Name
OCaml,Sys.argv.(n),Array.length Sys.argv,first argument
F#,args.[n],args.Length,Assembly.GetEntryAssembly()<wbr/>.Location
Standard ML,"List.nth (CommandLine<wbr/>.arguments (), n)",length (CommandLine<wbr/>.arguments ()),CommandLine.name ()
Haskell (GHC),lang=haskelldo { args <- System.getArgs; return length args !! n ,lang=haskelldo { args <- System.getArgs; return length args ,System.getProgName
COBOL,COBOL Arguments[c],,
