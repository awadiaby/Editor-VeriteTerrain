! variable,constant,type synonym
Ada[1],identifier : type« := initial_value»Ada declaration[e],identifier : constant type := final_value
ALGOL 68,modename name« := initial_value»;,modename name = value;
C (C99),type name« = initial_value»;,enum{ name = value };
Objective-C,,
C++,,const type name = value;
C#,"type name1« = initial_value», name2« = initial_value», ... ; or var name = initial_value;","const type name = value, name = value, ... ; or readonly type name = value, name = value, ... ;"
D,type name« = initial_value»; or auto name = value;,const type name = value; or immutable type name = value;
Java,type name« = initial_value»;,final type name = value;
JavaScript,var name« = initial_value»; or let name« = initial_value»; (since ECMAScript 2015),const name = value; (since ECMAScript 2015)
Go,var name type« = initial_value» or name := initial_value,const name «type» = value
RustRust declaration[f],let mut name«: type»« = initial_value»; static mut NAME: type = value;,let name«: type»« = initial_value»; const NAME: type = value; static NAME: type = value;
Swift,var name« : type»« = initial_value»,let name «: type» = value
Common Lisp,(defparameter name initial-value) or (defvar name initial-value),(defconstant name value)
Scheme,(define name initial_value),
ISLISP,(defglobal name initial_value) or (defdynamic name initial_value),(defconstant name value)
PascalPascal's declarations[a],name: type« = initial_value»,name = value
Visual Basic,Dim name «As type»,"See notes to left. Constants use the same syntax, and: use Const instead of Dim have a restriction to only certain primitive types Const name1 «As type» = value, name2 «As type» = value, ..."
Visual Basic .NET[10],"The variable declaration syntax of VB.NET is surprisingly difficult to precisely describe. Given that there exist the identifier suffixes ("modifiers"): type_character, available as an alternative to an As clause for some primitive data types; nullable_specifier; and array_specifier; and that a modified_identifier is of the form identifier«type_character»«nullable_specifier»«array_specifier»; a modified_identifier_list is a comma-separated list of two or more occurrences of modified_identifier; and a declarator_list is a comma-separated list of declarators, which can be of the form identifier As object_creation_expression (object initializer declarator), modified_identifier« As non_array_type«array_rank_specifier»»« = initial_value» (single declarator), or modified_identifier_list« As «non_array_type««array_rank_specifier»» (multiple declarator); valid declaration statements are of the form <dl><dd>Dim declarator_list,</dd></dl> where, for the purpose of semantic analysis, to convert the declarator_list to a list of only single declarators: <dl> <dd>The As clauses of each multiple declarator is distributed over its modified_identifier_list</dd> <dd>The As New type... of each object initializer declarator is replaced with As type = New type...</dd> </dl> and for which, for each identifier, a type_character and As clause do not both appear; if an As clause is present, an array_rank_specifier does not appear both as a modification of the identifier and on the type of the As clause; an unmodified_type can be determined, by the rule that, if a type_character or As clause is present, unmodified_type is that specified by such construct, and that otherwise, either Option Infer must be on and the identifier must have an initializer, in which case unmodified_type is that of the initializer, or Option Strict must be off, in which case unmodified_type is Object; its final_type is its unmodified_type prepended before its modifiers; its final_type is a valid type; and if an initial_value is present, either Option Strict is on and initial_value has a widening conversion to final_type, or Option Strict is off and initial_value has a narrowing conversion to final_type. If Option Explicit is off, variables do not require explicit declaration; they are declared implicitly when used: name = initial_value",
Xojo,Dim name «As type»« = initial_value»,
Python,name = initial_value,rowspan=2 
CoffeeScript,,
S-Lang,name = initial_value;,
Fortran,type name,"type, PARAMETER :: name = value"
PHP,$name = initial_value;,"define("name", value); const name = value (5.3+)"
Perl,«my» $name« = initial_value»;Perl's my keyword[c],use constant name => value;
Raku,«my «type»» $name« = initial_value»;Perl's my keyword[c],«my «type»» constant name = value;
Ruby,name = initial_value,Name = value
Scala,var name«: type» = initial_value,val name«: type» = value
Windows PowerShell,«[type] »$name = initial_value,
Bash shell,name=initial_value,
OCaml,let name« : type ref» = ref valueML ref[d],let name «: type» = value
F#,let mutable name« : type» = value,
Standard ML,val name« : type ref» = ref valueML ref[d],val name «: type» = value
Haskell,,«name::type;» name = value
Forth,VARIABLE name (in some systems use value VARIABLE name instead),value CONSTANT name
COBOL,level-number name type clauses.,«0»1 name CONSTANT «AS» value.
Mathematica,name=initial_value,
